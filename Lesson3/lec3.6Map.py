# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта и возвращает
# итератор с новыми объектами.
# f(x) => x + 10
# map (f, [ 1,  2,  3,  4,  5 ])
#           ↓   ↓   ↓   ↓   ↓
#         [ 11  12  13  14  15 ]
# нельзя пройтись дважды
li = [x for x in range(1, 20)]
print(li)                            # вывод: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
li = map(lambda x: x + 10, li)
print(li)                            # вывод:<map object at 0x0000019591063D90>
# чтоб вывести набор данных нужно:
li = list(map(lambda x: x + 10, li)) # сделать явное преобразование в список
print(li)                            # вывод: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]

#data = input().split()               # набор вводимых данных, разделенных пробелом с помощью ф-ции split()
# data = map(int, input().split())      # получаем список input().split() - кладем его в качестве второго аргумента в ф-ю map,а int первый аргумент.
# print(data)                           # # вывод: снова <map object at 0x000001B261113D00>
# чтоб вывести набор данных нужно:
# data = list(map(int, input().split()))  # ввод: 25 31 47 62 85
# print(data)                             # вывод: [25, 31, 47, 62, 85]

# можно не приводить к типу list, тогда нужно использовать цикл for c оператором in
data = map(int, '2 3 4 6 8'.split())
for e in data:
    print(e)
print('---------')                       # напечатает только один раз, особенность map
for e in data:
    print(e)
# map результат работы map - некий итератор, по итератору можно проитись только один раз.
# Для работы необходимо сохранять, например в list
